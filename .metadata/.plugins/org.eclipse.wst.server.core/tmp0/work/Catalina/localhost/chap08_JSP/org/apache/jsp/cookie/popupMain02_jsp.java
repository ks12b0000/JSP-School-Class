/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-30 03:05:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cookie;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class popupMain02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 String popupMode = "on"; 

	Cookie[] cookies = request.getCookies();
	if (cookies != null) {
		for (Cookie c : cookies) {
			String cookieName = c.getName();
			String cookieValue = c.getValue();
			if (cookieName.equals("PopupClose")) {	/* "PopupClose" 쿠키가 존재하면 */
				popupMode = cookieValue;			/* popupMode의 값을 업데이트 */
			}
		}
	}


      out.write("	\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("	<title>쿠키를 이용한 팝업 관리</title>\r\n");
      out.write("	<style type=\"text/css\">\r\n");
      out.write("		div#popup {\r\n");
      out.write("			position: absolute;\r\n");
      out.write("			top: 100px;\r\n");
      out.write("			left: 50px;\r\n");
      out.write("			color: yellow;\r\n");
      out.write("			width: 270px;\r\n");
      out.write("			height: 100px;\r\n");
      out.write("			background-color: gray;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		div#popup>div {\r\n");
      out.write("			position: relative;\r\n");
      out.write("			background-color: #ffffff;\r\n");
      out.write("			top: 0px;\r\n");
      out.write("			border: 1px solid gray;\r\n");
      out.write("			padding: 10px;\r\n");
      out.write("			color: black;\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		$(function() {\r\n");
      out.write("			$('#closeBtn').click(function() {	/* 닫기 버튼을 누르면  */\r\n");
      out.write("				$('#popup').hide();				/* 팝업창을 숨김 처리함 */\r\n");
      out.write("				\r\n");
      out.write("				/* [오늘 하루 열지 않음]을 체크했는지를 확인하여 \r\n");
      out.write("				   쿠키를 설정 --popupCookie.jsp 실행\r\n");
      out.write("				*/\r\n");
      out.write("				/* id가 inactiveToday이면서 \"체크된\" 체크박스 */ 			/* 값을 읽어옴 => chkVal에 1저장됨 */\r\n");
      out.write("				let chkVal = $('input:checkbox[id=inactiveToday]:checked').val();\r\n");
      out.write("				\r\n");
      out.write("				/* jQuery의 ajax() :  비동기 HTTP 요청을 보내는 함수 */\r\n");
      out.write("				$.ajax({						/* 4) 비동기 요청을 보냄 */\r\n");
      out.write("					url : './popupCookie.jsp',	/* 1) 요청을 보낼 페이지의 URL */\r\n");
      out.write("					type : 'get',				/* 2) 'get', 'post'등 http 메서드 지정 */\r\n");
      out.write("					data : {inactiveToday : chkVal},  /* 3) 서버로 보낼 데이터  */\r\n");
      out.write("					dataType : \"text\",				/* 5) 서버로부터 받을 응답 데이터의 타입은 일반 텍스트임 */\r\n");
      out.write("					success : function(resData) {	/* 6) 요청 성공 시 실행할 콜백 함수 */\r\n");
      out.write("						if (resData != '') 			/* 7) 응답 데이터가 있다면 */\r\n");
      out.write("							location.reload()		/* 8) 페이지 새로고침 */							\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>팝업 메인 페이지</h2>\r\n");
      out.write("	");

		for(int i = 1; i <= 10; i++) {
			out.print("현재 팝업창은" + popupMode + " 상태입니다.<br/>");
		}
		if(popupMode.equals("on")) {	/* 팝업 창 표시 */
	
      out.write("\r\n");
      out.write("		<div id=\"popup\">\r\n");
      out.write("			<h2 align=\"center\">공지사항 팝업입니다.</h2>\r\n");
      out.write("			<div align=\"right\">\r\n");
      out.write("				<form action=\"#\" name=\"popFrm\">\r\n");
      out.write("					<input type=\"checkbox\" id=\"inactiveToday\" value=\"1\" />오늘 하루 열지 않음\r\n");
      out.write("					<input type=\"button\" value=\"닫기\" id=\"closeBtn\" />\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	\r\n");
      out.write("	");
		
		}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
